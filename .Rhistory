facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block")
#ylim(0, 100) +
#xlim(0, 100)
print(g4)
View(data_long)
str(data_long)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Trust",
y = "Reliance",
color = "Block")
ylim(0, 1) +
xlim(0, 100)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Trust",
y = "Reliance",
color = "Block") +
ylim(0, 1) +
xlim(0, 100)
print(g4)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Trust",
y = "Reliance",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g4)
model_8 <- lmer(data = data_long, Reliance ~ Condition * Reliability * Confidence * Trust + (1 | Participant))
summary(model_8)
tab_model(model_8)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Trust",
y = "Reliance",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g4)
# All Conditions LME
source(here('scripts', 'Other_Functions.R'))
data <- load_processed_data_all_conditions()
data_long <- load_processed_data_all_conditions_long()
# Figure Parameters
source(here('scripts', 'Figure_Parameters.R'))
# Visualize
g1 <- ggplot(data_all_conditions_long, aes(x = Confidence, y = Trust, color = as.factor(Block), group = as.factor(Block))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block") +
ylim(0, 100) +
xlim(0, 100)
print(g1)
g2 <- ggplot(data_all_conditions_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block") +
ylim(0, 100) +
xlim(0, 100)
print(g2)
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g5)
source(here('scripts', 'Other_Functions.R'))
data <- load_processed_data()
data_long <- load_processed_data_long()
# Figure Parameters
source(here('scripts', 'Figure_Parameters.R'))
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g5)
View(data_long)
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
#geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability")
#ylim(0, 1) +
#xlim(0, 100)
print(g5)
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability")
#ylim(0, 1) +
#xlim(0, 100)
print(g5)
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability")
ylim(0, 100) +
xlim(0, 100)
print(g5)
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability") +
ylim(0, 100) +
xlim(0, 100)
print(g5)
model_4 <- lmer(data = data_long, Trust ~ Condition * Reliability * Confidence + (1 | Participant))
summary(model_4)
tab_model(model_4)
model_8 <- lmer(data = data_long, Reliance ~ Condition * Reliability * Confidence * Trust + (1 | Participant))
summary(model_8)
tab_model(model_8)
g6 <- ggplot(data_long, aes(x = Confidence, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Reliance",
color = "Reliability") +
ylim(0, 100) +
xlim(0, 100)
print(g6)
g6 <- ggplot(data_long, aes(x = Confidence, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Reliance",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g6)
setwd("/Users/chrisholland/Documents/MATLAB/Blue_Orange_Reliance")
setwd("/Users/chrisholland/Documents/MATLAB/Blue_Orange_Reliance/2024.02.23_D1")
# This code relies on the pacman, tidyverse and jsonlite packages
require(pacman)
p_load('tidyverse', 'jsonlite')
# We're going to assume that the data coming from
# the third-party tool has been loaded into R,
# for example from a CSV file.
data_raw <- read_csv('labjs.csv')
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# Unpack the JSON data and discard the compressed version
data_raw %>%
# Provide a fallback for missing data
mutate(
!!labjs_column := recode(.[[labjs_column]], .missing='[{}]')
) %>%
# Expand JSON-encoded data per participant
group_by_all() %>%
do(
fromJSON(.[[labjs_column]], flatten=T)
) %>%
ungroup() %>%
# Remove column containing raw JSON
select(-matches(labjs_column)) -> data
# As a final step, you might want to save the
# resulting long-form dataset
write_csv(data, 'labjs_df.csv')
setwd("/Users/chrisholland/Documents/MATLAB/Blue_Orange_Reliance/2024.02.23_I1")
# This code relies on the pacman, tidyverse and jsonlite packages
require(pacman)
p_load('tidyverse', 'jsonlite')
# We're going to assume that the data coming from
# the third-party tool has been loaded into R,
# for example from a CSV file.
data_raw <- read_csv('labjs.csv')
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# Unpack the JSON data and discard the compressed version
data_raw %>%
# Provide a fallback for missing data
mutate(
!!labjs_column := recode(.[[labjs_column]], .missing='[{}]')
) %>%
# Expand JSON-encoded data per participant
group_by_all() %>%
do(
fromJSON(.[[labjs_column]], flatten=T)
) %>%
ungroup() %>%
# Remove column containing raw JSON
select(-matches(labjs_column)) -> data
# We're going to assume that the data coming from
# the third-party tool has been loaded into R,
# for example from a CSV file.
data_raw <- read_csv('labjs.csv')
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# remove problems
data_raw <- data_raw[-c(443),] %>% type_convert()
# Unpack the JSON data and discard the compressed version
data_raw %>%
# Provide a fallback for missing data
mutate(
!!labjs_column := recode(.[[labjs_column]], .missing='[{}]')
) %>%
# Expand JSON-encoded data per participant
group_by_all() %>%
do(
fromJSON(.[[labjs_column]], flatten=T)
) %>%
ungroup() %>%
# Remove column containing raw JSON
select(-matches(labjs_column)) -> data
# As a final step, you might want to save the
# resulting long-form dataset
write_csv(data, 'labjs_df.csv')
setwd("/Users/chrisholland/Documents/MATLAB/Blue_Orange_Reliance/2024.02.24_I1")
# This code relies on the pacman, tidyverse and jsonlite packages
require(pacman)
p_load('tidyverse', 'jsonlite')
# We're going to assume that the data coming from
# the third-party tool has been loaded into R,
# for example from a CSV file.
data_raw <- read_csv('labjs.csv')
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# Unpack the JSON data and discard the compressed version
data_raw %>%
# Provide a fallback for missing data
mutate(
!!labjs_column := recode(.[[labjs_column]], .missing='[{}]')
) %>%
# Expand JSON-encoded data per participant
group_by_all() %>%
do(
fromJSON(.[[labjs_column]], flatten=T)
) %>%
ungroup() %>%
# Remove column containing raw JSON
select(-matches(labjs_column)) -> data
# We're going to assume that the data coming from
# the third-party tool has been loaded into R,
# for example from a CSV file.
data_raw <- read_csv('labjs.csv')
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# remove problems
data_raw <- data_raw[-c(328, 353),] %>% type_convert()
# Unpack the JSON data and discard the compressed version
data_raw %>%
# Provide a fallback for missing data
mutate(
!!labjs_column := recode(.[[labjs_column]], .missing='[{}]')
) %>%
# Expand JSON-encoded data per participant
group_by_all() %>%
do(
fromJSON(.[[labjs_column]], flatten=T)
) %>%
ungroup() %>%
# Remove column containing raw JSON
select(-matches(labjs_column)) -> data
# As a final step, you might want to save the
# resulting long-form dataset
write_csv(data, 'labjs_df.csv')
setwd("/Users/chrisholland/Documents/MATLAB/Blue_Orange_Reliance/2024.02.25_I1")
# This code relies on the pacman, tidyverse and jsonlite packages
require(pacman)
p_load('tidyverse', 'jsonlite')
# We're going to assume that the data coming from
# the third-party tool has been loaded into R,
# for example from a CSV file.
data_raw <- read_csv('labjs.csv')
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# Unpack the JSON data and discard the compressed version
data_raw %>%
# Provide a fallback for missing data
mutate(
!!labjs_column := recode(.[[labjs_column]], .missing='[{}]')
) %>%
# Expand JSON-encoded data per participant
group_by_all() %>%
do(
fromJSON(.[[labjs_column]], flatten=T)
) %>%
ungroup() %>%
# Remove column containing raw JSON
select(-matches(labjs_column)) -> data
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# remove problems
data_raw <- data_raw[-c(158, 290),] %>% type_convert()
# We're going to assume that the data coming from
# the third-party tool has been loaded into R,
# for example from a CSV file.
data_raw <- read_csv('labjs.csv')
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# remove problems
data_raw <- data_raw[-c(158, 290),] %>% type_convert()
# Unpack the JSON data and discard the compressed version
data_raw %>%
# Provide a fallback for missing data
mutate(
!!labjs_column := recode(.[[labjs_column]], .missing='[{}]')
) %>%
# Expand JSON-encoded data per participant
group_by_all() %>%
do(
fromJSON(.[[labjs_column]], flatten=T)
) %>%
ungroup() %>%
# Remove column containing raw JSON
select(-matches(labjs_column)) -> data
# As a final step, you might want to save the
# resulting long-form dataset
write_csv(data, 'labjs_df.csv')
setwd("/Users/chrisholland/Documents/MATLAB/Blue_Orange_Reliance/2024.02.25_I2")
# This code relies on the pacman, tidyverse and jsonlite packages
require(pacman)
p_load('tidyverse', 'jsonlite')
# We're going to assume that the data coming from
# the third-party tool has been loaded into R,
# for example from a CSV file.
data_raw <- read_csv('labjs.csv')
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# Unpack the JSON data and discard the compressed version
data_raw %>%
# Provide a fallback for missing data
mutate(
!!labjs_column := recode(.[[labjs_column]], .missing='[{}]')
) %>%
# Expand JSON-encoded data per participant
group_by_all() %>%
do(
fromJSON(.[[labjs_column]], flatten=T)
) %>%
ungroup() %>%
# Remove column containing raw JSON
select(-matches(labjs_column)) -> data
# As a final step, you might want to save the
# resulting long-form dataset
write_csv(data, 'labjs_df.csv')
setwd("/Users/chrisholland/Documents/MATLAB/Blue_Orange_Reliance/2024.02.25_D1")
# This code relies on the pacman, tidyverse and jsonlite packages
require(pacman)
p_load('tidyverse', 'jsonlite')
# We're going to assume that the data coming from
# the third-party tool has been loaded into R,
# for example from a CSV file.
data_raw <- read_csv('labjs.csv')
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# Unpack the JSON data and discard the compressed version
data_raw %>%
# Provide a fallback for missing data
mutate(
!!labjs_column := recode(.[[labjs_column]], .missing='[{}]')
) %>%
# Expand JSON-encoded data per participant
group_by_all() %>%
do(
fromJSON(.[[labjs_column]], flatten=T)
) %>%
ungroup() %>%
# Remove column containing raw JSON
select(-matches(labjs_column)) -> data
# This code relies on the pacman, tidyverse and jsonlite packages
require(pacman)
p_load('tidyverse', 'jsonlite')
# We're going to assume that the data coming from
# the third-party tool has been loaded into R,
# for example from a CSV file.
data_raw <- read_csv('labjs.csv')
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# remove problems
data_raw <- data_raw[-c(132),] %>% type_convert()
# Unpack the JSON data and discard the compressed version
data_raw %>%
# Provide a fallback for missing data
mutate(
!!labjs_column := recode(.[[labjs_column]], .missing='[{}]')
) %>%
# Expand JSON-encoded data per participant
group_by_all() %>%
do(
fromJSON(.[[labjs_column]], flatten=T)
) %>%
ungroup() %>%
# Remove column containing raw JSON
select(-matches(labjs_column)) -> data
# As a final step, you might want to save the
# resulting long-form dataset
write_csv(data, 'labjs_df.csv')
setwd("/Users/chrisholland/Documents/MATLAB/Blue_Orange_Reliance/2024.02.26_D1")
# This code relies on the pacman, tidyverse and jsonlite packages
require(pacman)
p_load('tidyverse', 'jsonlite')
# We're going to assume that the data coming from
# the third-party tool has been loaded into R,
# for example from a CSV file.
data_raw <- read_csv('labjs.csv')
# One of the columns in this file contains the
# JSON-encoded data from lab.js
labjs_column <- 'data'
# Unpack the JSON data and discard the compressed version
data_raw %>%
# Provide a fallback for missing data
mutate(
!!labjs_column := recode(.[[labjs_column]], .missing='[{}]')
) %>%
# Expand JSON-encoded data per participant
group_by_all() %>%
do(
fromJSON(.[[labjs_column]], flatten=T)
) %>%
ungroup() %>%
# Remove column containing raw JSON
select(-matches(labjs_column)) -> data
# As a final step, you might want to save the
# resulting long-form dataset
write_csv(data, 'labjs_df.csv')
