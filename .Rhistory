xlim(0, 100)
print(g4)
# Visualize
g4 <- ggplot(data_all_conditions_long, aes(x = Confidence, y = Trust, color = as.factor(Block), group = as.factor(Block)) +
# Visualize
g4 <- ggplot(data_all_conditions_long, aes(x = Confidence, y = Trust, color = as.factor(Block), group = as.factor(Block))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block") +
ylim(0, 100) +
xlim(0, 100)
print(g4)
print(g4)
# Visualize
g4 <- ggplot(data_all_conditions_long, aes(x = Confidence, y = Trust, color = as.factor(Block), group = as.factor(Block))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block") +
ylim(0, 100) +
xlim(0, 100)
print(g4)
g2 <- ggplot(data_all_conditions_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block") +
ylim(0, 100) +
xlim(0, 100)
print(g2)
model_4 <- lmer(data = data_long, Trust ~ Condition * Reliability * Confidence + (1 | Participant))
summary(model_4)
tab_model(model_4)
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/scripts/Main.R", echo=TRUE)
model_4 <- lmer(data = data_long, Trust ~ Condition * Reliability * Confidence + (1 | Participant))
summary(model_4)
tab_model(model_4)
View(data)
View(data_long)
model_6 <- lmer(data = data_long, Trust ~ Condition * Reliability * Confidence * Reliance + (1 | Participant))
summary(model_6)
tab_model(model_6)
model_8 <- lmer(data = data_long, Reliance ~ Condition * Reliability * Confidence * Trust + (1 | Participant))
summary(model_8)
tab_model(model_8)
g4 <- ggplot(data_all_conditions_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block") +
ylim(0, 100) +
xlim(0, 100)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block") +
ylim(0, 100) +
xlim(0, 100)
print(g4)
View(data)
View(data_long)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block") +
#ylim(0, 100) +
#xlim(0, 100)
print(g4)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block")
#ylim(0, 100) +
#xlim(0, 100)
print(g4)
View(data_long)
str(data_long)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Trust",
y = "Reliance",
color = "Block")
ylim(0, 1) +
xlim(0, 100)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Trust",
y = "Reliance",
color = "Block") +
ylim(0, 1) +
xlim(0, 100)
print(g4)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Trust",
y = "Reliance",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g4)
model_8 <- lmer(data = data_long, Reliance ~ Condition * Reliability * Confidence * Trust + (1 | Participant))
summary(model_8)
tab_model(model_8)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Trust",
y = "Reliance",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g4)
# All Conditions LME
source(here('scripts', 'Other_Functions.R'))
data <- load_processed_data_all_conditions()
data_long <- load_processed_data_all_conditions_long()
# Figure Parameters
source(here('scripts', 'Figure_Parameters.R'))
# Visualize
g1 <- ggplot(data_all_conditions_long, aes(x = Confidence, y = Trust, color = as.factor(Block), group = as.factor(Block))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block") +
ylim(0, 100) +
xlim(0, 100)
print(g1)
g2 <- ggplot(data_all_conditions_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Self-confidence",
y = "Trust",
color = "Block") +
ylim(0, 100) +
xlim(0, 100)
print(g2)
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g5)
source(here('scripts', 'Other_Functions.R'))
data <- load_processed_data()
data_long <- load_processed_data_long()
# Figure Parameters
source(here('scripts', 'Figure_Parameters.R'))
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g5)
View(data_long)
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
#geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability")
#ylim(0, 1) +
#xlim(0, 100)
print(g5)
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability")
#ylim(0, 1) +
#xlim(0, 100)
print(g5)
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability")
ylim(0, 100) +
xlim(0, 100)
print(g5)
g5 <- ggplot(data_long, aes(x = Confidence, y = Trust, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Trust",
color = "Reliability") +
ylim(0, 100) +
xlim(0, 100)
print(g5)
model_4 <- lmer(data = data_long, Trust ~ Condition * Reliability * Confidence + (1 | Participant))
summary(model_4)
tab_model(model_4)
model_8 <- lmer(data = data_long, Reliance ~ Condition * Reliability * Confidence * Trust + (1 | Participant))
summary(model_8)
tab_model(model_8)
g6 <- ggplot(data_long, aes(x = Confidence, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Reliance",
color = "Reliability") +
ylim(0, 100) +
xlim(0, 100)
print(g6)
g6 <- ggplot(data_long, aes(x = Confidence, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Reliance",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g6)
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/scripts/00_Setup.R", echo=TRUE)
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/scripts/01_Load_Data.R", echo=TRUE)
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/scripts/02_Preprocessing.R", echo=TRUE)
View(data)
str(data$Condition)
summary(data$Condition)
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/scripts/00_Setup.R", echo=TRUE)
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/scripts/01_Load_Data.R", echo=TRUE)
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/scripts/02_Preprocessing.R", echo=TRUE)
str(data$Condition)
summary(data$Condition)
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/scripts/Main.R", echo=TRUE)
summary(model_8)
# Visualize Data
# Trust by Confidence
g1 <- ggplot(data_long, aes(x=Confidence, y=Trust, color=Condition, group=Condition)) +
geom_smooth(alpha = 0.25) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_classic() +
labs(title = "Trust by Confidence by Condition", x = "Confidence", y = "Trust") +
scale_color_manual(values = c("Decreasing" = colour.decreasing, "Increasing" = colour.increasing))+
ylim(0, 100) +
xlim(0, 100)
print(g1)
g6 <- ggplot(data_long, aes(x = Confidence, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Confidence",
y = "Reliance",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g6)
# Visualize Data
# Trust by Confidence
g1 <- ggplot(data_long, aes(x=Confidence, y=Trust, color=Condition, group=Condition)) +
geom_smooth(alpha = 0.25) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_classic() +
labs(title = "Trust by Confidence by Condition", x = "Confidence", y = "Trust") +
scale_color_manual(values = c("Decreasing" = colour.decreasing, "Increasing" = colour.increasing))+
ylim(0, 100) +
xlim(0, 100)
print(g1)
ggsave(here('output','figures','09_Trust_by_Confidence_by_Condition.png'),
plot = g1, device = device, width = width, height = height, units = units, dpi = dpi)
g2 <- ggplot(data_long, aes(x=Confidence, y=Trust, color=Condition, group=Condition)) +
geom_smooth(alpha = 0.25, method = 'lm') +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_classic() +
labs(title = "Trust by Confidence by Condition", x = "Confidence", y = "Trust") +
scale_color_manual(values = c("Decreasing" = colour.decreasing, "Increasing" = colour.increasing))+
ylim(0, 100) +
xlim(0, 100)
print(g2)
ggsave(here('output','figures','09_Trust_by_Confidence_by_Condition_(Linear_Model).png'),
plot = g2, device = device, width = width, height = height, units = units, dpi = dpi)
g3 <- ggplot(data_long, aes(x=Confidence, y=Trust)) +
geom_smooth(alpha = 0.25, method = 'lm', colour = 'green') +
geom_jitter(width = 0.2, height = 0, alpha = 0.5, colour = 'green') +
theme_classic() +
labs(title = "Trust by Confidence by Condition", x = "Confidence", y = "Trust") +
ylim(0, 100) +
xlim(0, 100)
print(g3)
ggsave(here('output','figures','09_Trust_by_Confidence.png'),
plot = g3, device = device, width = width, height = height, units = units, dpi = dpi)
g4 <- ggplot(data_long, aes(x = Trust, y = Reliance, color = as.factor(Reliability), group = as.factor(Reliability))) +
geom_jitter(size = 0.5, alpha = 0.3) +
geom_smooth(method = 'lm', alpha = 0.2) +
facet_wrap(.~Condition, scales='free') +
theme_classic() +
theme(axis.line=element_line()) +
labs(title = "Trust as a function of self-confidence",
x = "Trust",
y = "Reliance",
color = "Reliability") +
ylim(0, 1) +
xlim(0, 100)
print(g4)
print(g4)
ggsave(here('output','figures','09_Trust_by_Reliance_by_Condition.png'),
plot = g4, device = device, width = width, height = height, units = units, dpi = dpi)
print(g5)
ggsave(here('output','figures','09_Trust_by_Confidence_by_Reliability_by_Condition.png'),
plot = g5, device = device, width = width, height = height, units = units, dpi = dpi)
ggsave(here('output','figures','09_Reliance_by_Confidence_by_Reliability_by_Condition.png'),
plot = g6, device = device, width = width, height = height, units = units, dpi = dpi)
print(g6)
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/10_LME_Follow_up.R")
# Check Residuals
plot(resid(model_8) ~ fitted(model_8))
abline(h = 0, lty = 2, col = "red")
# Check Normality
qqnorm(resid(model_8))
qqline(resid(model_8))
# Check Cook's Distance
library(influence.ME)
install.packages("influence.ME")
# Check Cook's Distance
library(influence.ME)
infl <- influence(model_8)
infl <- influence(model_8, group = "Condition")
infl <- influence(model_8, group = "Increasing")
infl <- influence(model_8, obs = TRUE)
warnings()
plot(infl, which = "cook")
# Check Homoscedasticity
plot(model_8)
# Check Residuals
plot(resid(model_8) ~ fitted(model_8))
# Check Homoscedasticity
plot(model_8)
# Check Residuals
plot(resid(model_8) ~ fitted(model_8))
# Check Variance Inflation Factors
library(car)
vif(model_8)
# Check Homoscedasticity
plot(model_8)
# Check Variance Inflation Factors
library(car)
vif(model_8)
# Check for Outliers
outlierTest(model_8)
# Check for Influential Cases
influenceIndexPlot(model_8)
View(data_long)
# Check for Multicollinearity
library(corrplot)
cor <- cor(data_long[,c("Trust", "Condition", "Reliability", "Confidence", "Reliance")])
cor <- cor(data_long[,c("Trust", "Reliability", "Confidence", "Reliance")])
corrplot(cor, method = "circle")
# Check for Overdispersion
dispersion_glmer(model_8)
# Check for Overdispersion
library(blmeco)
install.packages('blmeco')
# Check for Overdispersion
library(blmeco)
dispersion_glmer(model_8)
r.squaredGLMM(model_8)
# Check for Overdispersion 2
library(MuMIn)
install.packages(MuMIn)
install.packages('MuMIn')
# Check for Overdispersion 2
library(MuMIn)
r.squaredGLMM(model_8)
# Check for Zero Inflation
zeroinfl(model_8)
install.packages('pscl')
# Check for Zero Inflation
library(pscl))
# Check for Zero Inflation
library(pscl)
zeroinfl(model_8)
# Check for Zero Inflation
library(pscl)
zeroinfl(model_8)
# Fixed Effects
coef(summary(model_8))
ggplot(data_long, aes(x = fitted(model_8), y = residuals(model_8))) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red")
plot_model(model_8, type = "diag")
install.packages('glmmTMB')
library(glmmTMB))
plot_model(model_8, type = "diag")
library(glmmTMB)
plot_model(model_8, type = "diag")
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/scripts/00_Setup.R", echo=TRUE)
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/scripts/01_Load_Data.R", echo=TRUE)
source("~/Documents/MATLAB/Blue_Orange_Reliance/BO_Reliance_Analysis/scripts/02_Preprocessing.R", echo=TRUE)
# Remove uneeded data
data <- filter(data, condition <= 2) # condition 1 and 2 are 50% decreasing
data <- as.data.frame(data)
# Remove poorly performing participants
data <- mutate(data, totalPerformance = rowSums(select(data, p1_before:p6_before), na.rm = TRUE)) # calculate total performance
library(here)
library(dplyr)
library(tidyr)
library(sjPlot)
library(ggplot2)
library(lme4)
# Remove poorly performing participants
data <- tidyr::mutate(data, totalPerformance = rowSums(select(data, p1_before:p6_before), na.rm = TRUE)) # calculate total performance
# Remove poorly performing participants
data <- dplyr::mutate(data, totalPerformance = rowSums(select(data, p1_before:p6_before), na.rm = TRUE)) # calculate total performance
